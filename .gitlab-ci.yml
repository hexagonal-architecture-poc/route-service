
stages:
  - test
  - code-quality
  - package
  - build-image
  - deploy


variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  MAVEN_IMAGE: maven:3.5.4-jdk-8-alpine

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository


test:
  stage: test
  image: ${MAVEN_IMAGE}
  artifacts:
    paths:
      - target/classes
      - target/jacoco.exec
    expire_in: 1 hour
  script:
    - 'mvn test -B $MAVEN_CLI_OPTS'


sonarqube:
  stage: code-quality
  image: ${MAVEN_IMAGE}
  script:
    - 'mvn -B sonar:sonar -Dsonar.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_LOGIN} -Dsonar.password=${SONARQUBE_PASSWORD} $MAVEN_CLI_OPTS'
  when: manual
  allow_failure: true
  dependencies:
    - test


package:
  image: ${MAVEN_IMAGE}
  stage: package
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 hour
  script:
    - 'mvn -B package -DskipTests $MAVEN_CLI_OPTS'


registry:
  stage: build-image
  image: docker:stable-git
  services:
   - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: registry.gitlab.com/itinerary-challenge/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}
  before_script:
    - export DOCKER_HOST='tcp://docker:2375'
  script:
     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
     - docker build --tag ${IMAGE_NAME} .
     - docker push ${IMAGE_NAME}
  dependencies:
    - package

